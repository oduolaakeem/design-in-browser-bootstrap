/*------------------------------------*\
    $Mixins
\*------------------------------------*/


/* ============================================
    Media Query
*/
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name:        nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}


/* ============================================
  Placeholder text
*/
@mixin placeholder-text {
    // sass-lint:disable no-vendor-prefixes
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
    // sass-lint:enddisable
};


/* ============================================
  iOS Native vertical scroll
*/
@mixin native-vertical-scroll {
    position: relative; // Ensures container is considered the offsetParent() in JS
    overflow-y: scroll;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch; // sass-lint:disable-line no-misspelled-properties
}


/* ============================================
   Aligner: placeholder class used to align
   components at the template-level
   For want of a better place to put this I've left it here:
*/
@mixin aligner {
    max-width: $max-width;
    margin: 0 auto;
}


/* ============================================
   Gutter spacing
*/
@mixin gutter($top: 0.5, $right: 0.5, $bottom: 0.5, $left: 0.5, $reset: false) {

    @function stomp($value) {
        @return if($value, !important, null); // sass-lint:disable-line no-important
    }

    $p-top: map-get($gutters, 'default') * $top;
    $p-right: map-get($gutters, 'default') * $right;
    $p-bottom: map-get($gutters, 'default') * $bottom;
    $p-left: map-get($gutters, 'default') * $left;

    padding: $p-top $p-right $p-bottom $p-left stomp($reset);

    $last-value: 0;

    @each $point, $value in $breakpoints {
        $new-value: map-get($gutters, $point) * $top;

        @if( $new-value != $last-value ){
            @include media-query($point) {
                $p-top: map-get($gutters, $point) * $top;
                $p-right: map-get($gutters, $point) * $right;
                $p-bottom: map-get($gutters, $point) * $bottom;
                $p-left: map-get($gutters, $point) * $left;

                padding: $p-top $p-right $p-bottom $p-left stomp($reset);
            }
        }

        $last-value: map-get($gutters, $point) * $top;
    }
}



/* ============================================
  Hide text
*/
@mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
}


/* ============================================
    Output a rem and px fallback value for the given property
*/
@mixin rem($property, $values) {

    $px:  ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $px:  append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $px:  append($px, $value);
            $rem: append($rem, rem(strip-unit($value)));
        }
    }
    // sass-lint:disable no-duplicate-properties
    #{$property}: $px;
    #{$property}: $rem;
    // sass-lint:enddisable
}


/* ============================================
    Output a `font-size: [x]rem;` declaration for the given px value
*/
@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}


/* ============================================
    Font sizes
*/
@mixin font-size($keyword) {
    $size: map-get($font-sizes, $keyword);

    @if $size == null {
        @warn 'Font size ‘#{$keyword}’ does not exist';
    } @else {
        @include rem-font-size($size);
    }
}
